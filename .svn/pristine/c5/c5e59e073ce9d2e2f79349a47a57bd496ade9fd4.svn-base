using drKid;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;


namespace drKidAdmin.Source.admin.customer
{
    public partial class A_CUSTOMER_MANAGER : PageBase
    {
        public string cp_ret_status = "";
        public string cp_ret_message = "";
        public string flag = "";

        public string FROM = ""; //캘린더 날짜
        public string TO = "";//캘린더 날짜
        public string DATEUI = "7"; //사용자가 세팅한 상품등록일자 검색UI 정보(today,7,15,30 ...), 디폴트가 7일
        public string SEARCH_TYPE = "*"; // 검색 조건
        public string SEARCH_VALUE = ""; // 검색 텍스트 
        public string USER_DIVISION = "*";// 회원 구분
        public string USER_DIVISION_DETAIL = "*"; // 회원 구분 디테일 21,31 
        public string USER_DIVISION_DETAIL2 = "*"; // 회원 구분 디테일 41,52 
        public string RECOMMENDER_ID = ""; //추천인 아이디 
        public DataTable USER_TABLE = null;

        //페이징 관련
        public int custom_Paging = 0;
        public int offset = 0;
        public int matches = 10;
        public int searchPages = 5;
        public int totalCount = 0;
        public string naviUrl = null;
        public string pageNavigationStr = null;
        Dictionary<string, string> naviQuery = null;
        public string search_btn_click_flag = "";

        protected void Page_Load(object sender, EventArgs e)
        {
            this.basePageInit();
            custom_Paging = BizUtil.getInt(Request["custom_Paging"]);
            if (!IsPostBack)
            {
                offset = BizUtil.getInt(Request["offset"]);
                if (offset > 0) //페이징 버튼을 눌렀을때
                {
                    setParam();
                    setNaviString();
                    search_UserList();
                }
                
            }
            else
            {
                flag = Request["flag"];
                switch (flag)
                {
                    case "search":
                        setParam();
                        setNaviString();
                        search_UserList();
                        break;
                }
            }

  

        }
        private void setParam() {
            search_btn_click_flag = Request["search_btn_click_flag"];
            DATEUI = Request["DATEUI"];
            FROM = Request["FROM"]; 
            TO = Request["TO"];
            if (!String.IsNullOrEmpty(FROM))
            {
                FROM = FROM.Replace("-", "").Trim();
            }
            if (!String.IsNullOrEmpty(TO))
            {
                TO = TO.Replace("-", "").Trim();
            }
            SEARCH_TYPE = Request["SEARCH_TYPE"];
            SEARCH_VALUE = Request["SEARCH_VALUE"];
            USER_DIVISION = Request["USER_DIVISION"];
            USER_DIVISION_DETAIL = Request["USER_DIVISION_DETAIL"];
            USER_DIVISION_DETAIL2 = Request["USER_DIVISION_DETAIL2"];
            RECOMMENDER_ID = Request["RECOMMENDER_ID"];
        }

        private void search_UserList()
        {
            bizHelper biz = new bizHelper();
            Hashtable hs = new Hashtable();
            DataSet ds = new DataSet();
            if (custom_Paging > 0)
            {
                offset = custom_Paging;
            }
            if (search_btn_click_flag == "Y") {
                offset = 0;
            }
            try
            {
                hs.Clear();
                hs.Add("SP_NAME", "PKG_USER_MASTER.PUM_USER_LIST");
                hs.Add("I_PERSON_NO", "DRKID");

                hs.Add("I_SERACH_TYPE",SEARCH_TYPE );
                hs.Add("I_SERACH_VALUE", SEARCH_VALUE);
                hs.Add("I_USER_DIVISION",USER_DIVISION );
                hs.Add("I_USER_DIVISION_DETAIL",USER_DIVISION_DETAIL );
                hs.Add("I_USER_DIVISION_DETAIL2",USER_DIVISION_DETAIL2 );
                hs.Add("I_CREATED_FROM",FROM );
                hs.Add("I_CREATED_TO", TO);
                hs.Add("I_RECOMMENDER_ID", RECOMMENDER_ID);

                hs.Add("I_OFFSET", offset);
                hs.Add("I_MATCHES", matches);

                hs.Add("I_LANGUAGE_CODE", "KOR");
                hs.Add("I_PROGRESS_GUID", BizUtil.getGUID());
                hs.Add("I_REQUEST_USER_ID", baseUser.userId);
                hs.Add("I_REQUEST_IP_ADDRESS", baseUser.userIpAddress);
                hs.Add("I_REQUEST_PROGRAM_ID", "A_CUSTOMER_MANAGER");
                ds = biz.operationSP(hs);

                cp_ret_status = ds.Tables["O_ERROR_FLAG"].Rows[0]["O_ERROR_FLAG"].ToString();
                cp_ret_message = ds.Tables["O_RETURN_MESSAGE"].Rows[0]["O_RETURN_MESSAGE"].ToString();
                if (cp_ret_status == "N")
                {
                    totalCount = Int32.Parse(ds.Tables["O_RESULT_CURSOR_TOTAL"].Rows[0]["TOTAL_CNT"] + "");
                    USER_TABLE = ds.Tables["O_RESULT_CURSOR"];
                    pageNavigationStr = BizUtil.seachNavigation(naviUrl, offset, totalCount, matches, searchPages);
                }
            }
            catch (Exception ex)
            {
                cp_ret_status = "Y";
                cp_ret_message = ex.Message;
            }
            finally
            {
                if (biz != null)
                {
                    biz.Dispose();
                    biz = null;
                }
            }
        }

        private void setNaviString()
        {
            naviUrl = Request.Url.AbsolutePath;
            naviQuery = new Dictionary<string, string>();

            //offset은 있을경우 항상 받는것으로 처리
            if (!String.IsNullOrEmpty(Request["offset"]))
            {
                offset = BizUtil.getInt(Request["offset"]);
            }

            //Search 조건 Setting

            string queryString = "";
            foreach (KeyValuePair<string, string> query in naviQuery)
            {
                queryString += (queryString == "" ? "" : "&") + query.Key + "=" + query.Value;
            }

            naviUrl = naviUrl + "?" + queryString;
        }

    }
}